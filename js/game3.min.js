(function(window){var Game3=window.Game3={};Game3.webgl=function(){try{return!!window.WebGLRenderingContext&&!!document.createElement("canvas").getContext("experimental-webgl")}catch(e){return false}}();Game3.createRenderer=function(width,height){if(Game3.webgl){var renderer=new THREE.WebGLRenderer({antialias:true,preserveDrawingBuffer:true});renderer.setClearColor(16777215,1)}else{renderer=new THREE.CanvasRenderer}renderer.setSize(width,height);return renderer};Game3.createScene=function(camera){var scene=new THREE.Scene;scene.add(camera);camera.lookAt(scene.position);return scene};Game3.createCamera=function(options){options=options||{};var viewAngle=options.viewAngle||60;var aspect=options.aspect||1;var near=options.near||.1;var far=options.far||1e4;var position=options.position||new THREE.Vector3(500,500,500);var camera=new THREE.PerspectiveCamera(viewAngle,aspect,near,far);camera.position=position;return camera};Game3.renderLoop=function(caller,renderFn){var render=function(){window.requestAnimationFrame(render);renderFn.apply(caller)};render()}})(window);(function(Game3){var initializing=false;var fnTest=/xyz/.test(function(){xyz})?/\b_super\b/:/.*/;Game3.Class=function(){};Game3.Class.extend=function(prop){prop=prop===undefined?{}:prop;var _super=this.prototype;initializing=true;var prototype=new this;initializing=false;for(var name in prop){prototype[name]=typeof prop[name]=="function"&&typeof _super[name]=="function"&&fnTest.test(prop[name])?function(name,fn){return function(){var tmp=this._super;this._super=_super[name];var ret=fn.apply(this,arguments);this._super=tmp;return ret}}(name,prop[name]):prop[name]}function Class(){if(!initializing){if(this.before_init)this.before_init.apply(this,arguments);if(this.init)this.init.apply(this,arguments);if(this.after_init)this.after_init.apply(this,arguments)}}Class.prototype=prototype;Class.prototype.constructor=Class;Class.extend=arguments.callee;return Class}})(Game3);Game3.Collision=Game3.Class.extend({init:function(params){this.set(params)},set:function(params){params=params||{};this.point=params.point||this.point||null;this.face=params.face||this.face||null;this.mesh=params.mesh||this.mesh||null;this.other=params.other||this.other||null;this._normal=params.normal||this._normal||null;this._correction=params.correction||this._correction||null},normal:function(){return this._normal||this.face&&this.face.normal||null},correction:function(){return this._correction||new THREE.Vector3(0,0,0)}});Game3.COLLISIONS_GENERAL=1;Game3.COLLISIONS_SPHERES=2;Game3.Collisions=Game3.Class.extend({init:function(models,type){this.models=models||[];type=type!==undefined?type:Game3.COLLISIONS_GENERAL;switch(type){case Game3.COLLISIONS_GENERAL:this.checkFn=this._check;break;case Game3.COLLISIONS_SPHERES:this.checkFn=this._checkSphere;break;default:this.checkFn=this._check}},track:function(model){this.models.push(model)},check:function(){for(var i=0;i<this.models.length-1;i++){for(var j=i+1;j<this.models.length;j++){var modelA=this.models[i];var modelB=this.models[j];var meshA=modelA.getMesh();var meshB=modelB.getMesh();var collisionA=this.checkFn(meshA,meshB);var collisionB=this.checkFn(meshB,meshA);if(collisionA&&collisionB){this._sendCollision(modelA,collisionA);this._sendCollision(modelB,collisionB)}}}},_check:function(meshA,meshB){var collision=null;var err=10;meshA.geometry.vertices.some(function(vertex){var globalVertex=vertex.clone().applyProjection(meshA.matrix);var direction=globalVertex.sub(meshA.position);var dist=direction.length();var ray=new THREE.Raycaster(meshA.position,direction.clone().normalize(),0,dist+err);var intersects=ray.intersectObject(meshB);if(intersects.length>0&&intersects[0].distance<dist){collision=this._getCollision(direction,intersects[0]);return true}},this);return collision},_checkSphere:function(sphereA,sphereB){var radiusA=sphereA.geometry.radius;var radiusB=sphereB.geometry.radius;var distance=sphereB.position.clone().sub(sphereA.position);var difference=distance.length()-(radiusA+radiusB);if(difference<0){var unit=distance.normalize();var point=unit.clone().multiplyScalar(radiusA).add(sphereA.position);var normal=unit.clone().negate();var correction=unit.clone().multiplyScalar(difference/2);return new Game3.Collision({point:point,face:null,normal:normal,correction:correction,mesh:sphereB,other:sphereB.Game3Model})}return null},_sendCollision:function(model,collisions){var handler=model.collision;if(handler&&typeof handler=="function"){handler.apply(model,[collisions]);return true}return false},_getCollision:function(direction,intersection){var difference=intersection.distance-direction.length();var correction=direction.clone().normalize().multiplyScalar(difference/2);return new Game3.Collision({point:intersection.point,face:intersection.face,mesh:intersection.object,other:intersection.object.Game3Model,correction:correction})}});Game3.Model=Game3.Class.extend({before_init:function(game){this.game=game;this.interactive=false},init:function(game){},setMesh:function(mesh){this.mesh=mesh;this.mesh.Game3Model=this},getMesh:function(){return this.mesh},show:function(interactive){if(interactive===undefined)interactive=false;this.interactive=interactive;if(interactive)this.game.addDynamic(this.mesh);else this.game.addStatic(this.mesh)},hide:function(){}});Game3.Light=Game3.Class.extend({init:function(game,color,position){this.game=game;if(color===undefined)color=16777215;if(position===undefined)position=new THREE.Vector3(0,0,0);var light=new THREE.PointLight(color);light.position=position;this.setLight(light)},setLight:function(light){if(light===undefined)return light;this.light=light},show:function(){this.game.addLight(this.light)}});Game3.Event=Game3.Class.extend({init:function(params){this.set(params)},set:function(params){params=params||{};this.distance=params.distance||this.distance||-1;this.delta2D=params.delta2D||this.delta2D||new THREE.Vector2(0,0);this.point2D=params.point2D||this.point2D||new THREE.Vector2(0,0);this.point3D=params.point3D||this.point3D||new THREE.Vector3(0,0,0);this.face=params.face||this.face||null;this.mesh=params.mesh||this.mesh||null;this.model=params.model||this.model||null}});Game3.Events=Game3.Class.extend({init:function(game){this.game=game;this.objects=[];this.projector=new THREE.Projector;this.isMouseDown=false;this.lastMousePosition=new THREE.Vector2(0,0);this.lastOver=null;this.lastClick=null;this.lastDrag=null;this.bind(game.canvas)},track:function(object){this.objects.push(object)},bind:function(container){var that=this;var types=["click","mousedown","mouseup","mousemove"];types.forEach(function(type){var handler=that.wrapper(that[type]);container.addEventListener(type,handler)})},wrapper:function(handler){var that=this;return function(event){var coords=new THREE.Vector2(event.layerX,event.layerY);var eventG3=new Game3.Event({delta2D:coords.clone().sub(that.lastMousePosition),point2D:coords});var targets=that.getTargets(coords.x,coords.y);if(targets.length){var target=targets[0];eventG3.set({distance:target.distance,point3D:target.point,face:target.face,mesh:target.object,model:target.object.Game3Model})}else{eventG3.set({model:that.game})}var ret=handler.apply(that,[eventG3]);that.checkFocus(eventG3.model,coords);that.lastMousePosition.set(coords.x,coords.y);event.preventDefault();return ret}},getTargets:function(x,y){var camera=this.game.camera;var vector=new THREE.Vector3(x/this.game.width*2-1,-(y/this.game.height)*2+1,.5);this.projector.unprojectVector(vector,camera);var raycaster=new THREE.Raycaster(camera.position,vector.sub(camera.position).normalize());var intersects=raycaster.intersectObjects(this.objects);return intersects},click:function(event){this.lastClick=event.model;var handler=event.model.click;this.sendEvent(event.model,handler,event)},mousedown:function(event){this.lastClick=event.model;this.isMouseDown=true;var handler=event.model.mousedown;this.sendEvent(event.model,handler,event);if(this.lastDrag){this.sendEvent(this.lastDrag,this.lastDrag.mousedrop,event);this.lastDrag=null}},mouseup:function(event){this.isMouseDown=false;var handler=event.model.mouseup;this.sendEvent(event.model,handler,event)},mousemove:function(event){var target=event.model;var handler=target.mousemove;this.sendEvent(target,handler,event);if(this.lastOver!==target){this.sendEvent(target,target.mouseover,event)}if(this.isMouseDown&&this.lastClick===target){this.lastDrag=target;this.sendEvent(target,target.mousedrag,event)}else if(this.isMouseDown&&this.lastDrag){this.sendEvent(this.lastDrag,this.lastDrag.mousedrag,event)}},checkFocus:function(current,coords){var focus=this.lastOver;if(focus&&(!current||focus!==current)){var event=new Game3.Event({point2D:coords.clone(),model:focus});this.sendEvent(focus,focus.mouseout,event)}this.lastOver=current},sendEvent:function(model,handler,event){if(model&&handler&&typeof handler=="function"){handler.apply(model,[event]);return true}return false}});Game3.Game=Game3.Class.extend({before_init:function(el){this.el=el;var width=el.offsetWidth;var height=el.offsetHeight;this.width=width;this.height=height;this.camera=Game3.createCamera({aspect:width/height});this.scene=Game3.createScene(this.camera);this.renderer=Game3.createRenderer(width,height);this.canvas=this.renderer.domElement;this.el.appendChild(this.canvas);this.events=new Game3.Events(this)},init:function(el){},after_init:function(el){Game3.renderLoop(this,this.render)},addStatic:function(object){this.scene.add(object)},addDynamic:function(object){this.events.track(object);this.scene.add(object)},addLight:function(light){this.scene.add(light)},timerfired:function(){},render:function(){this.timerfired();this.renderer.render(this.scene,this.camera)}});